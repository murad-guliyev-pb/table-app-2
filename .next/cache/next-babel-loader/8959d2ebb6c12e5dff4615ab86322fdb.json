{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mguliyev/Documents/table-app-new/components/app.tsx\";\nimport { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { isEqual } from \"lodash\";\nimport React, { useState } from \"react\";\nimport Table from \"../components/table\";\nimport UpdatedEmployees from \"../components/updatedEmployees\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst App = ({\n  employeesList\n}) => {\n  const {\n    0: deletedEmployees,\n    1: setDeletedEmployees\n  } = useState([]);\n  const {\n    0: editedEmployees,\n    1: setEditedEmployees\n  } = useState([]);\n  const {\n    0: employees,\n    1: setEmployees\n  } = useState(employeesList);\n  const {\n    0: isSubmited,\n    1: setIsSubmited\n  } = useState(false);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(\"\"); // Helpers\n\n  const isEmployeeEqualToInitial = employee => {\n    const initialEmployee = employeesList.find(item => item.id === employee.id);\n    return isEqual(employee, initialEmployee);\n  };\n\n  const existsInEditedEmployees = employeeId => {\n    return editedEmployees.some(item => item.id === employeeId);\n  };\n\n  const removeEmployeeFromEditedEmployees = employeeId => {\n    if (existsInEditedEmployees(employeeId)) {\n      const filtered = editedEmployees.filter(item => item.id !== employeeId);\n      setEditedEmployees(filtered);\n    }\n  };\n\n  const addEmployeeToEditedEmployees = employee => {\n    if (!existsInEditedEmployees(employee.id)) {\n      setEditedEmployees([...editedEmployees, employee]);\n    }\n  };\n\n  const replaceEmployeeInEditedEmployees = employee => {\n    const updatedEmployees = editedEmployees.map(item => item.id === employee.id ? employee : item);\n    setEditedEmployees(updatedEmployees);\n  };\n\n  const addRestoredEmployeeToEditedEmployees = employeeId => {\n    const restoredEmployee = employees.find(item => item.id === employeeId);\n\n    if (restoredEmployee && !isEmployeeEqualToInitial(restoredEmployee)) {\n      addEmployeeToEditedEmployees(restoredEmployee);\n    }\n  }; // Handlers\n\n\n  const handleEmployeeChange = employee => {\n    if (isEmployeeEqualToInitial(employee)) {\n      removeEmployeeFromEditedEmployees(employee.id);\n    } else {\n      if (existsInEditedEmployees(employee.id)) {\n        replaceEmployeeInEditedEmployees(employee);\n      } else {\n        addEmployeeToEditedEmployees(employee);\n      }\n    }\n\n    const updatedEmployees = employees.map(item => item.id === employee.id ? employee : item);\n    setEmployees(updatedEmployees);\n  };\n\n  const handleEmployeeDelete = employeeId => {\n    const deletedEmployee = employees.find(item => item.id === employeeId);\n\n    if (deletedEmployee) {\n      setDeletedEmployees([...deletedEmployees, deletedEmployee]);\n    }\n\n    removeEmployeeFromEditedEmployees(employeeId);\n  };\n\n  const handleEmployeeRestore = employeeId => {\n    const filtered = deletedEmployees.filter(item => item.id !== employeeId);\n    setDeletedEmployees(filtered);\n    addRestoredEmployeeToEditedEmployees(employeeId);\n  };\n\n  const resetToInitial = () => {\n    setIsSubmited(false);\n    setEmployees(employeesList);\n    setEditedEmployees([]);\n    setDeletedEmployees([]);\n  };\n\n  const getEmployees = () => {\n    const filtered = employees.filter(item => {\n      const values = Object.values(item);\n\n      for (const val of values) {\n        if (val.toLowerCase().includes(searchValue.toLocaleLowerCase())) {\n          return item;\n        }\n      }\n    });\n    return filtered;\n  };\n\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Box, {\n    style: {\n      backgroundColor: \"#1976d2\",\n      color: \"white\",\n      padding: \"12px 0\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    },\n    __self: this\n  }, ___EmotionJSX(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    },\n    __self: this\n  }, ___EmotionJSX(Typography, {\n    variant: \"h4\",\n    component: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    },\n    __self: this\n  }, \"Table Application\"))), ___EmotionJSX(Container, {\n    maxWidth: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    },\n    __self: this\n  }, ___EmotionJSX(Box, {\n    marginY: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    },\n    __self: this\n  }, ___EmotionJSX(Box, {\n    marginBottom: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    },\n    __self: this\n  }, ___EmotionJSX(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"flex-end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 25\n    },\n    __self: this\n  }, ___EmotionJSX(Box, {\n    marginRight: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    },\n    __self: this\n  }, ___EmotionJSX(Typography, {\n    variant: \"subtitle1\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 33\n    },\n    __self: this\n  }, \"Search:\")), ___EmotionJSX(TextField, {\n    value: searchValue,\n    onChange: event => setSearchValue(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 29\n    },\n    __self: this\n  }))), employees.length > 0 && ___EmotionJSX(Table, {\n    employees: getEmployees(),\n    deletedEmployees: deletedEmployees,\n    onEmployeeChange: handleEmployeeChange,\n    onEmployeeDelete: handleEmployeeDelete,\n    onEmployeeRestore: handleEmployeeRestore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    },\n    __self: this\n  }), ___EmotionJSX(Box, {\n    marginTop: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    },\n    __self: this\n  }, ___EmotionJSX(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    alignItems: \"baseline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    },\n    __self: this\n  }, ___EmotionJSX(Box, {\n    marginRight: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 29\n    },\n    __self: this\n  }, ___EmotionJSX(Button, {\n    style: {\n      backgroundColor: \"#1976d2\"\n    },\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: () => setIsSubmited(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 33\n    },\n    __self: this\n  }, \"Submit\")), ___EmotionJSX(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: resetToInitial,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 29\n    },\n    __self: this\n  }, \"Reset to initial\"))), isSubmited && ___EmotionJSX(Box, {\n    marginTop: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    },\n    __self: this\n  }, ___EmotionJSX(UpdatedEmployees, {\n    deletedEmployees: deletedEmployees,\n    editedEmployees: editedEmployees,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/mguliyev/Documents/table-app-new/components/app.tsx"],"names":["Button","Container","Grid","TextField","Typography","Box","isEqual","React","useState","Table","UpdatedEmployees","App","employeesList","deletedEmployees","setDeletedEmployees","editedEmployees","setEditedEmployees","employees","setEmployees","isSubmited","setIsSubmited","searchValue","setSearchValue","isEmployeeEqualToInitial","employee","initialEmployee","find","item","id","existsInEditedEmployees","employeeId","some","removeEmployeeFromEditedEmployees","filtered","filter","addEmployeeToEditedEmployees","replaceEmployeeInEditedEmployees","updatedEmployees","map","addRestoredEmployeeToEditedEmployees","restoredEmployee","handleEmployeeChange","handleEmployeeDelete","deletedEmployee","handleEmployeeRestore","resetToInitial","getEmployees","values","Object","val","toLowerCase","includes","toLocaleLowerCase","backgroundColor","color","padding","event","target","value","length"],"mappings":"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","sourcesContent":["import { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { isEqual } from \"lodash\";\nimport React, { useState } from \"react\";\n\nimport Table from \"../components/table\";\nimport UpdatedEmployees from \"../components/updatedEmployees\";\nimport { IEmployee } from \"../helpers/models\";\n\ninterface IProps {\n    employeesList: IEmployee[];\n}\n\nconst App: React.FC<IProps> = ({ employeesList }): JSX.Element => {\n    const [deletedEmployees, setDeletedEmployees] = useState<IEmployee[]>([]);\n    const [editedEmployees, setEditedEmployees] = useState<IEmployee[]>([]);\n    const [employees, setEmployees] = useState<IEmployee[]>(employeesList);\n    const [isSubmited, setIsSubmited] = useState<boolean>(false);\n    const [searchValue, setSearchValue] = useState<string>(\"\");\n\n    // Helpers\n    const isEmployeeEqualToInitial = (employee: IEmployee) => {\n        const initialEmployee = employeesList.find((item) => item.id === employee.id);\n        return isEqual(employee, initialEmployee);\n    };\n\n    const existsInEditedEmployees = (employeeId: string) => {\n        return editedEmployees.some((item) => item.id === employeeId);\n    };\n\n    const removeEmployeeFromEditedEmployees = (employeeId: string) => {\n        if (existsInEditedEmployees(employeeId)) {\n            const filtered = editedEmployees.filter((item) => item.id !== employeeId);\n            setEditedEmployees(filtered);\n        }\n    };\n\n    const addEmployeeToEditedEmployees = (employee: IEmployee) => {\n        if (!existsInEditedEmployees(employee.id)) {\n            setEditedEmployees([...editedEmployees, employee]);\n        }\n    };\n\n    const replaceEmployeeInEditedEmployees = (employee: IEmployee) => {\n        const updatedEmployees = editedEmployees.map((item) => (item.id === employee.id ? employee : item));\n        setEditedEmployees(updatedEmployees);\n    };\n\n    const addRestoredEmployeeToEditedEmployees = (employeeId: string) => {\n        const restoredEmployee = employees.find((item) => item.id === employeeId);\n        if (restoredEmployee && !isEmployeeEqualToInitial(restoredEmployee)) {\n            addEmployeeToEditedEmployees(restoredEmployee);\n        }\n    };\n\n    // Handlers\n    const handleEmployeeChange = (employee: IEmployee) => {\n        if (isEmployeeEqualToInitial(employee)) {\n            removeEmployeeFromEditedEmployees(employee.id);\n        } else {\n            if (existsInEditedEmployees(employee.id)) {\n                replaceEmployeeInEditedEmployees(employee);\n            } else {\n                addEmployeeToEditedEmployees(employee);\n            }\n        }\n\n        const updatedEmployees = employees.map((item) => (item.id === employee.id ? employee : item));\n        setEmployees(updatedEmployees);\n    };\n\n    const handleEmployeeDelete = (employeeId: string) => {\n        const deletedEmployee = employees.find((item) => item.id === employeeId);\n        if (deletedEmployee) {\n            setDeletedEmployees([...deletedEmployees, deletedEmployee]);\n        }\n\n        removeEmployeeFromEditedEmployees(employeeId);\n    };\n\n    const handleEmployeeRestore = (employeeId: string) => {\n        const filtered = deletedEmployees.filter((item) => item.id !== employeeId);\n        setDeletedEmployees(filtered);\n\n        addRestoredEmployeeToEditedEmployees(employeeId);\n    };\n\n    const resetToInitial = () => {\n        setIsSubmited(false);\n        setEmployees(employeesList);\n        setEditedEmployees([]);\n        setDeletedEmployees([]);\n    };\n\n    const getEmployees = () => {\n        const filtered = employees.filter((item) => {\n            const values = Object.values(item);\n            for (const val of values) {\n                if (val.toLowerCase().includes(searchValue.toLocaleLowerCase())) {\n                    return item;\n                }\n            }\n        });\n        return filtered;\n    };\n\n    return (\n        <>\n            <Box style={{ backgroundColor: \"#1976d2\", color: \"white\", padding: \"12px 0\" }}>\n                <Grid container direction=\"row\" justify=\"center\">\n                    <Typography variant=\"h4\" component=\"h4\">\n                        Table Application\n                    </Typography>\n                </Grid>\n            </Box>\n            <Container maxWidth={\"lg\"}>\n                <Box marginY={5}>\n                    <Box marginBottom={2}>\n                        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\n                            <Box marginRight={1}>\n                                <Typography variant=\"subtitle1\" component=\"p\">\n                                    Search:\n                                </Typography>\n                            </Box>\n                            <TextField value={searchValue} onChange={(event) => setSearchValue(event.target.value)} />\n                        </Grid>\n                    </Box>\n                    {employees.length > 0 && (\n                        <Table\n                            employees={getEmployees()}\n                            deletedEmployees={deletedEmployees}\n                            onEmployeeChange={handleEmployeeChange}\n                            onEmployeeDelete={handleEmployeeDelete}\n                            onEmployeeRestore={handleEmployeeRestore}\n                        />\n                    )}\n                    <Box marginTop={2}>\n                        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"baseline\">\n                            <Box marginRight={1}>\n                                <Button\n                                    style={{ backgroundColor: \"#1976d2\" }}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => setIsSubmited(true)}\n                                >\n                                    Submit\n                                </Button>\n                            </Box>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={resetToInitial}>\n                                Reset to initial\n                            </Button>\n                        </Grid>\n                    </Box>\n                    {isSubmited && (\n                        <Box marginTop={5}>\n                            <UpdatedEmployees deletedEmployees={deletedEmployees} editedEmployees={editedEmployees} />\n                        </Box>\n                    )}\n                </Box>\n            </Container>\n        </>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}