{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport TableCellComponent from \"@material-ui/core/TableCell\";\nimport TableRowComponent from \"@material-ui/core/TableRow\";\nimport React, { useEffect, useState } from \"react\";\nimport { validateDateOfBirth, validateName, validatePhoneNumber, validatePosition, validateSurname } from \"../../helpers/utils\";\nimport TableCell from \"./tableCell\";\nimport TableRowActions from \"./tableRowActions\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst TableRow = ({\n  employeeData,\n  deletedEmployees,\n  isEditing,\n  setIsEditing,\n  onEmployeeChange,\n  onEmployeeDelete,\n  onEmployeeRestore\n}) => {\n  const {\n    0: isDeleted,\n    1: setIsDeleted\n  } = useState(false);\n  const {\n    0: employee,\n    1: setEmployee\n  } = useState(employeeData);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState([]);\n  const keys = Object.keys(employee);\n  useEffect(() => {\n    setEmployee(employeeData);\n  }, [employeeData, isEditing]);\n  useEffect(() => {\n    const isEmployeeInDeletedEmployeesList = deletedEmployees.some(item => item.id === employee.id);\n    setIsDeleted(isEmployeeInDeletedEmployeesList);\n  }, [deletedEmployees]);\n\n  const validateEmployee = employee => {\n    const {\n      name,\n      surname,\n      dateOfBirth,\n      position,\n      phoneNumber\n    } = employee;\n    const _errors = [];\n\n    if (name === \"\" || !validateName(name)) {\n      _errors.push(\"name\");\n    }\n\n    if (surname === \"\" || !validateSurname(surname)) {\n      _errors.push(\"surname\");\n    }\n\n    if (dateOfBirth === \"\" || !validateDateOfBirth(dateOfBirth)) {\n      _errors.push(\"dateOfBirth\");\n    }\n\n    if (position === \"\" || !validatePosition(position)) {\n      _errors.push(\"position\");\n    }\n\n    if (phoneNumber === \"\" || !validatePhoneNumber(phoneNumber)) {\n      _errors.push(\"phoneNumber\");\n    }\n\n    setErrors(_errors);\n    return _errors.length === 0;\n  };\n\n  const handleCellChange = event => {\n    const {\n      target: {\n        name,\n        value\n      }\n    } = event;\n\n    for (const key in employee) {\n      if (key === name) {\n        const _employee = _objectSpread({}, employee);\n\n        _employee[key] = value;\n        setEmployee(_employee);\n      }\n    }\n  };\n\n  const handleEdit = () => {\n    setErrors([]);\n    setIsEditing(employee.id);\n  };\n\n  const handleSave = () => {\n    if (validateEmployee(employee)) {\n      onEmployeeChange(employee);\n      setIsEditing(\"\");\n    }\n  };\n\n  const handleDelete = () => {\n    onEmployeeDelete(employee.id);\n    setIsEditing(\"\");\n  };\n\n  const handleRestore = () => {\n    onEmployeeRestore(employee.id);\n  };\n\n  return ___EmotionJSX(TableRowComponent, {\n    style: {\n      backgroundColor: isDeleted ? \"rgba(220, 0, 78, 0.08)\" : \"inherit\"\n    }\n  }, keys.map(key => ___EmotionJSX(TableCellComponent, {\n    key: key\n  }, ___EmotionJSX(TableCell, {\n    errors: errors,\n    name: key,\n    isEditing: isEditing,\n    value: employee[key],\n    onChange: handleCellChange\n  }))), ___EmotionJSX(TableCellComponent, null, ___EmotionJSX(TableRowActions, {\n    isEditing: isEditing,\n    isDeleted: isDeleted,\n    onEdit: handleEdit,\n    onSave: handleSave,\n    onDelete: handleDelete,\n    onRestore: handleRestore\n  })));\n};\n\nexport default TableRow;","map":null,"metadata":{},"sourceType":"module"}