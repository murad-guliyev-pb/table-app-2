{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mguliyev/Documents/table-app-new/pages/index.tsx\";\nimport { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { isEqual } from \"lodash\";\nimport React, { useState } from \"react\";\nimport useSWR from \"swr/dist/use-swr\";\nimport Table from \"../components/table\";\nimport UpdatedEmployees from \"../components/updatedEmployees\";\nimport { fetcher } from \"../helpers/models\";\n\nconst App = ({\n  initialData\n}) => {\n  const {\n    data,\n    error\n  } = useSWR(\"/api/employees\", fetcher, {\n    initialData\n  });\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"failed to load\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 23\n  }, this);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 23\n  }, this);\n  const employeesList = data;\n  const {\n    0: deletedEmployees,\n    1: setDeletedEmployees\n  } = useState([]);\n  const {\n    0: editedEmployees,\n    1: setEditedEmployees\n  } = useState([]);\n  const {\n    0: employees,\n    1: setEmployees\n  } = useState(employeesList);\n  const {\n    0: isSubmited,\n    1: setIsSubmited\n  } = useState(false);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(\"\"); // Helpers\n\n  const isEmployeeEqualToInitial = employee => {\n    const initialEmployee = employeesList.find(item => item.id === employee.id);\n    return isEqual(employee, initialEmployee);\n  };\n\n  const existsInEditedEmployees = employeeId => {\n    return editedEmployees.some(item => item.id === employeeId);\n  };\n\n  const removeEmployeeFromEditedEmployees = employeeId => {\n    if (existsInEditedEmployees(employeeId)) {\n      const filtered = editedEmployees.filter(item => item.id !== employeeId);\n      setEditedEmployees(filtered);\n    }\n  };\n\n  const addEmployeeToEditedEmployees = employee => {\n    if (!existsInEditedEmployees(employee.id)) {\n      setEditedEmployees([...editedEmployees, employee]);\n    }\n  };\n\n  const replaceEmployeeInEditedEmployees = employee => {\n    const updatedEmployees = editedEmployees.map(item => item.id === employee.id ? employee : item);\n    setEditedEmployees(updatedEmployees);\n  };\n\n  const addRestoredEmployeeToEditedEmployees = employeeId => {\n    const restoredEmployee = employees.find(item => item.id === employeeId);\n\n    if (restoredEmployee && !isEmployeeEqualToInitial(restoredEmployee)) {\n      addEmployeeToEditedEmployees(restoredEmployee);\n    }\n  }; // Handlers\n\n\n  const handleEmployeeChange = employee => {\n    if (isEmployeeEqualToInitial(employee)) {\n      removeEmployeeFromEditedEmployees(employee.id);\n    } else {\n      if (existsInEditedEmployees(employee.id)) {\n        replaceEmployeeInEditedEmployees(employee);\n      } else {\n        addEmployeeToEditedEmployees(employee);\n      }\n    }\n\n    const updatedEmployees = employees.map(item => item.id === employee.id ? employee : item);\n    setEmployees(updatedEmployees);\n  };\n\n  const handleEmployeeDelete = employeeId => {\n    const deletedEmployee = employees.find(item => item.id === employeeId);\n\n    if (deletedEmployee) {\n      setDeletedEmployees([...deletedEmployees, deletedEmployee]);\n    }\n\n    removeEmployeeFromEditedEmployees(employeeId);\n  };\n\n  const handleEmployeeRestore = employeeId => {\n    const filtered = deletedEmployees.filter(item => item.id !== employeeId);\n    setDeletedEmployees(filtered);\n    addRestoredEmployeeToEditedEmployees(employeeId);\n  };\n\n  const resetToInitial = () => {\n    setIsSubmited(false);\n    setEmployees(employeesList);\n    setEditedEmployees([]);\n    setDeletedEmployees([]);\n  };\n\n  const getEmployees = () => {\n    const filtered = employees.filter(item => {\n      const values = Object.values(item);\n\n      for (const val of values) {\n        if (val.toLowerCase().includes(searchValue.toLocaleLowerCase())) {\n          return item;\n        }\n      }\n    });\n    return filtered;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        backgroundColor: \"#1976d2\",\n        color: \"white\",\n        padding: \"12px 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h4\",\n          children: \"Table Application\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        marginY: 5,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          marginBottom: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justify: \"flex-end\",\n            alignItems: \"flex-end\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              marginRight: 1,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                component: \"p\",\n                children: \"Search:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              value: searchValue,\n              onChange: event => setSearchValue(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), employees.length > 0 && /*#__PURE__*/_jsxDEV(Table, {\n          employees: getEmployees(),\n          deletedEmployees: deletedEmployees,\n          onEmployeeChange: handleEmployeeChange,\n          onEmployeeDelete: handleEmployeeDelete,\n          onEmployeeRestore: handleEmployeeRestore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          marginTop: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justify: \"flex-end\",\n            alignItems: \"baseline\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              marginRight: 1,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  backgroundColor: \"#1976d2\"\n                },\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: () => setIsSubmited(true),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              onClick: resetToInitial,\n              children: \"Reset to initial\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), isSubmited && /*#__PURE__*/_jsxDEV(Box, {\n          marginTop: 5,\n          children: /*#__PURE__*/_jsxDEV(UpdatedEmployees, {\n            deletedEmployees: deletedEmployees,\n            editedEmployees: editedEmployees\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getServerSideProps() {\n  const res = await fetch(`localhost/data`);\n  const data = await res.json(); // Pass data to the page via props\n\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default App;","map":{"version":3,"sources":["/Users/mguliyev/Documents/table-app-new/pages/index.tsx"],"names":["Button","Container","Grid","TextField","Typography","Box","isEqual","React","useState","useSWR","Table","UpdatedEmployees","fetcher","App","initialData","data","error","employeesList","deletedEmployees","setDeletedEmployees","editedEmployees","setEditedEmployees","employees","setEmployees","isSubmited","setIsSubmited","searchValue","setSearchValue","isEmployeeEqualToInitial","employee","initialEmployee","find","item","id","existsInEditedEmployees","employeeId","some","removeEmployeeFromEditedEmployees","filtered","filter","addEmployeeToEditedEmployees","replaceEmployeeInEditedEmployees","updatedEmployees","map","addRestoredEmployeeToEditedEmployees","restoredEmployee","handleEmployeeChange","handleEmployeeDelete","deletedEmployee","handleEmployeeRestore","resetToInitial","getEmployees","values","Object","val","toLowerCase","includes","toLocaleLowerCase","backgroundColor","color","padding","event","target","value","length","getServerSideProps","res","fetch","json","props"],"mappings":"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","sourcesContent":["import { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { isEqual } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport useSWR from \"swr/dist/use-swr\";\n\nimport Table from \"../components/table\";\nimport UpdatedEmployees from \"../components/updatedEmployees\";\nimport { fetcher, IEmployee } from \"../helpers/models\";\n\nconst App = ({ initialData }): JSX.Element => {\n    const { data, error } = useSWR(\"/api/employees\", fetcher, { initialData });\n\n    if (error) return <div>failed to load</div>;\n    if (!data) return <div>loading...</div>;\n\n    const employeesList = data;\n\n    const [deletedEmployees, setDeletedEmployees] = useState<IEmployee[]>([]);\n    const [editedEmployees, setEditedEmployees] = useState<IEmployee[]>([]);\n    const [employees, setEmployees] = useState<IEmployee[]>(employeesList);\n    const [isSubmited, setIsSubmited] = useState<boolean>(false);\n    const [searchValue, setSearchValue] = useState<string>(\"\");\n\n    // Helpers\n    const isEmployeeEqualToInitial = (employee: IEmployee) => {\n        const initialEmployee = employeesList.find((item) => item.id === employee.id);\n        return isEqual(employee, initialEmployee);\n    };\n\n    const existsInEditedEmployees = (employeeId: string) => {\n        return editedEmployees.some((item) => item.id === employeeId);\n    };\n\n    const removeEmployeeFromEditedEmployees = (employeeId: string) => {\n        if (existsInEditedEmployees(employeeId)) {\n            const filtered = editedEmployees.filter((item) => item.id !== employeeId);\n            setEditedEmployees(filtered);\n        }\n    };\n\n    const addEmployeeToEditedEmployees = (employee: IEmployee) => {\n        if (!existsInEditedEmployees(employee.id)) {\n            setEditedEmployees([...editedEmployees, employee]);\n        }\n    };\n\n    const replaceEmployeeInEditedEmployees = (employee: IEmployee) => {\n        const updatedEmployees = editedEmployees.map((item) => (item.id === employee.id ? employee : item));\n        setEditedEmployees(updatedEmployees);\n    };\n\n    const addRestoredEmployeeToEditedEmployees = (employeeId: string) => {\n        const restoredEmployee = employees.find((item) => item.id === employeeId);\n        if (restoredEmployee && !isEmployeeEqualToInitial(restoredEmployee)) {\n            addEmployeeToEditedEmployees(restoredEmployee);\n        }\n    };\n\n    // Handlers\n    const handleEmployeeChange = (employee: IEmployee) => {\n        if (isEmployeeEqualToInitial(employee)) {\n            removeEmployeeFromEditedEmployees(employee.id);\n        } else {\n            if (existsInEditedEmployees(employee.id)) {\n                replaceEmployeeInEditedEmployees(employee);\n            } else {\n                addEmployeeToEditedEmployees(employee);\n            }\n        }\n\n        const updatedEmployees = employees.map((item) => (item.id === employee.id ? employee : item));\n        setEmployees(updatedEmployees);\n    };\n\n    const handleEmployeeDelete = (employeeId: string) => {\n        const deletedEmployee = employees.find((item) => item.id === employeeId);\n        if (deletedEmployee) {\n            setDeletedEmployees([...deletedEmployees, deletedEmployee]);\n        }\n\n        removeEmployeeFromEditedEmployees(employeeId);\n    };\n\n    const handleEmployeeRestore = (employeeId: string) => {\n        const filtered = deletedEmployees.filter((item) => item.id !== employeeId);\n        setDeletedEmployees(filtered);\n\n        addRestoredEmployeeToEditedEmployees(employeeId);\n    };\n\n    const resetToInitial = () => {\n        setIsSubmited(false);\n        setEmployees(employeesList);\n        setEditedEmployees([]);\n        setDeletedEmployees([]);\n    };\n\n    const getEmployees = () => {\n        const filtered = employees.filter((item) => {\n            const values = Object.values(item);\n            for (const val of values) {\n                if (val.toLowerCase().includes(searchValue.toLocaleLowerCase())) {\n                    return item;\n                }\n            }\n        });\n        return filtered;\n    };\n\n    return (\n        <>\n            <Box style={{ backgroundColor: \"#1976d2\", color: \"white\", padding: \"12px 0\" }}>\n                <Grid container direction=\"row\" justify=\"center\">\n                    <Typography variant=\"h4\" component=\"h4\">\n                        Table Application\n                    </Typography>\n                </Grid>\n            </Box>\n            <Container maxWidth={\"lg\"}>\n                <Box marginY={5}>\n                    <Box marginBottom={2}>\n                        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\n                            <Box marginRight={1}>\n                                <Typography variant=\"subtitle1\" component=\"p\">\n                                    Search:\n                                </Typography>\n                            </Box>\n                            <TextField value={searchValue} onChange={(event) => setSearchValue(event.target.value)} />\n                        </Grid>\n                    </Box>\n                    {employees.length > 0 && (\n                        <Table\n                            employees={getEmployees()}\n                            deletedEmployees={deletedEmployees}\n                            onEmployeeChange={handleEmployeeChange}\n                            onEmployeeDelete={handleEmployeeDelete}\n                            onEmployeeRestore={handleEmployeeRestore}\n                        />\n                    )}\n                    <Box marginTop={2}>\n                        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"baseline\">\n                            <Box marginRight={1}>\n                                <Button\n                                    style={{ backgroundColor: \"#1976d2\" }}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => setIsSubmited(true)}\n                                >\n                                    Submit\n                                </Button>\n                            </Box>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={resetToInitial}>\n                                Reset to initial\n                            </Button>\n                        </Grid>\n                    </Box>\n                    {isSubmited && (\n                        <Box marginTop={5}>\n                            <UpdatedEmployees deletedEmployees={deletedEmployees} editedEmployees={editedEmployees} />\n                        </Box>\n                    )}\n                </Box>\n            </Container>\n        </>\n    );\n};\n\nexport async function getServerSideProps() {\n    const res = await fetch(`localhost/data`);\n    const data = await res.json();\n\n    // Pass data to the page via props\n    return { props: { data } };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}