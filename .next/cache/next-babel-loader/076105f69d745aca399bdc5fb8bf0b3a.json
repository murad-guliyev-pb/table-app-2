{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mguliyev/Documents/table-app-new/pages/index.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { isEqual } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport Table from \"../components/table\";\nimport UpdatedEmployees from \"../components/updatedEmployees\";\n\nconst App = () => {\n  const {\n    0: deletedEmployees,\n    1: setDeletedEmployees\n  } = useState([]);\n  const {\n    0: editedEmployees,\n    1: setEditedEmployees\n  } = useState([]);\n  const {\n    0: employees,\n    1: setEmployees\n  } = useState(employeesList);\n  const {\n    0: isSubmited,\n    1: setIsSubmited\n  } = useState(false);\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(\"\");\n  useEffect(() => {\n    fetcher(`${cardsUrl()}/cardholderInfo`, storageService.getValue(\"token\")).then(data => {\n      setModel(_objectSpread(_objectSpread({}, model), {}, {\n        cardholderInfo: {\n          name: data.name,\n          surname: data.surname,\n          phone: data.phone,\n          email: data.email\n        },\n        card: _objectSpread(_objectSpread({}, model.card), {}, {\n          id: data.primaryCardId\n        })\n      }));\n      setPrimaryCardholderInfo(data);\n    }).catch(err => {\n      setError(err);\n    });\n  }, []); // Helpers\n\n  const isEmployeeEqualToInitial = employee => {\n    const initialEmployee = employeesList.find(item => item.id === employee.id);\n    return isEqual(employee, initialEmployee);\n  };\n\n  const existsInEditedEmployees = employeeId => {\n    return editedEmployees.some(item => item.id === employeeId);\n  };\n\n  const removeEmployeeFromEditedEmployees = employeeId => {\n    if (existsInEditedEmployees(employeeId)) {\n      const filtered = editedEmployees.filter(item => item.id !== employeeId);\n      setEditedEmployees(filtered);\n    }\n  };\n\n  const addEmployeeToEditedEmployees = employee => {\n    if (!existsInEditedEmployees(employee.id)) {\n      setEditedEmployees([...editedEmployees, employee]);\n    }\n  };\n\n  const replaceEmployeeInEditedEmployees = employee => {\n    const updatedEmployees = editedEmployees.map(item => item.id === employee.id ? employee : item);\n    setEditedEmployees(updatedEmployees);\n  };\n\n  const addRestoredEmployeeToEditedEmployees = employeeId => {\n    const restoredEmployee = employees.find(item => item.id === employeeId);\n\n    if (restoredEmployee && !isEmployeeEqualToInitial(restoredEmployee)) {\n      addEmployeeToEditedEmployees(restoredEmployee);\n    }\n  }; // Handlers\n\n\n  const handleEmployeeChange = employee => {\n    if (isEmployeeEqualToInitial(employee)) {\n      removeEmployeeFromEditedEmployees(employee.id);\n    } else {\n      if (existsInEditedEmployees(employee.id)) {\n        replaceEmployeeInEditedEmployees(employee);\n      } else {\n        addEmployeeToEditedEmployees(employee);\n      }\n    }\n\n    const updatedEmployees = employees.map(item => item.id === employee.id ? employee : item);\n    setEmployees(updatedEmployees);\n  };\n\n  const handleEmployeeDelete = employeeId => {\n    const deletedEmployee = employees.find(item => item.id === employeeId);\n\n    if (deletedEmployee) {\n      setDeletedEmployees([...deletedEmployees, deletedEmployee]);\n    }\n\n    removeEmployeeFromEditedEmployees(employeeId);\n  };\n\n  const handleEmployeeRestore = employeeId => {\n    const filtered = deletedEmployees.filter(item => item.id !== employeeId);\n    setDeletedEmployees(filtered);\n    addRestoredEmployeeToEditedEmployees(employeeId);\n  };\n\n  const resetToInitial = () => {\n    setIsSubmited(false);\n    setEmployees(employeesList);\n    setEditedEmployees([]);\n    setDeletedEmployees([]);\n  };\n\n  const getEmployees = () => {\n    const filtered = employees.filter(item => {\n      const values = Object.values(item);\n\n      for (const val of values) {\n        if (val.toLowerCase().includes(searchValue.toLocaleLowerCase())) {\n          return item;\n        }\n      }\n    });\n    return filtered;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        backgroundColor: \"#1976d2\",\n        color: \"white\",\n        padding: \"12px 0\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h4\",\n          children: \"Table Application\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        marginY: 5,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          marginBottom: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justify: \"flex-end\",\n            alignItems: \"flex-end\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              marginRight: 1,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                component: \"p\",\n                children: \"Search:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              value: searchValue,\n              onChange: event => setSearchValue(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), employees.length > 0 && /*#__PURE__*/_jsxDEV(Table, {\n          employees: getEmployees(),\n          deletedEmployees: deletedEmployees,\n          onEmployeeChange: handleEmployeeChange,\n          onEmployeeDelete: handleEmployeeDelete,\n          onEmployeeRestore: handleEmployeeRestore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          marginTop: 2,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justify: \"flex-end\",\n            alignItems: \"baseline\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              marginRight: 1,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  backgroundColor: \"#1976d2\"\n                },\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: () => setIsSubmited(true),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              onClick: resetToInitial,\n              children: \"Reset to initial\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), isSubmited && /*#__PURE__*/_jsxDEV(Box, {\n          marginTop: 5,\n          children: /*#__PURE__*/_jsxDEV(UpdatedEmployees, {\n            deletedEmployees: deletedEmployees,\n            editedEmployees: editedEmployees\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`);\n  const data = await res.json(); // Pass data to the page via props\n\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default App;","map":{"version":3,"sources":["/Users/mguliyev/Documents/table-app-new/pages/index.tsx"],"names":["Button","Container","Grid","TextField","Typography","Box","isEqual","React","useEffect","useState","Table","UpdatedEmployees","App","deletedEmployees","setDeletedEmployees","editedEmployees","setEditedEmployees","employees","setEmployees","employeesList","isSubmited","setIsSubmited","searchValue","setSearchValue","fetcher","cardsUrl","storageService","getValue","then","data","setModel","model","cardholderInfo","name","surname","phone","email","card","id","primaryCardId","setPrimaryCardholderInfo","catch","err","setError","isEmployeeEqualToInitial","employee","initialEmployee","find","item","existsInEditedEmployees","employeeId","some","removeEmployeeFromEditedEmployees","filtered","filter","addEmployeeToEditedEmployees","replaceEmployeeInEditedEmployees","updatedEmployees","map","addRestoredEmployeeToEditedEmployees","restoredEmployee","handleEmployeeChange","handleEmployeeDelete","deletedEmployee","handleEmployeeRestore","resetToInitial","getEmployees","values","Object","val","toLowerCase","includes","toLocaleLowerCase","backgroundColor","color","padding","event","target","value","length","getServerSideProps","res","fetch","json","props"],"mappings":"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","sourcesContent":["import { Button, Container, Grid, TextField, Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport { isEqual } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\n\nimport Table from \"../components/table\";\nimport UpdatedEmployees from \"../components/updatedEmployees\";\nimport { IEmployee } from \"../helpers/models\";\n\nconst App = (): JSX.Element => {\n    const [deletedEmployees, setDeletedEmployees] = useState<IEmployee[]>([]);\n    const [editedEmployees, setEditedEmployees] = useState<IEmployee[]>([]);\n    const [employees, setEmployees] = useState<IEmployee[]>(employeesList);\n    const [isSubmited, setIsSubmited] = useState<boolean>(false);\n    const [searchValue, setSearchValue] = useState<string>(\"\");\n\n    useEffect(() => {\n        fetcher(`${cardsUrl()}/cardholderInfo`, storageService.getValue(\"token\"))\n            .then((data: IPrimaryCardholderInfo) => {\n                setModel({\n                    ...model,\n                    cardholderInfo: {\n                        name: data.name,\n                        surname: data.surname,\n                        phone: data.phone,\n                        email: data.email,\n                    },\n                    card: {\n                        ...model.card,\n                        id: data.primaryCardId,\n                    },\n                });\n                setPrimaryCardholderInfo(data);\n            })\n            .catch((err: IError) => {\n                setError(err);\n            });\n    }, []);\n\n    // Helpers\n    const isEmployeeEqualToInitial = (employee: IEmployee) => {\n        const initialEmployee = employeesList.find((item) => item.id === employee.id);\n        return isEqual(employee, initialEmployee);\n    };\n\n    const existsInEditedEmployees = (employeeId: string) => {\n        return editedEmployees.some((item) => item.id === employeeId);\n    };\n\n    const removeEmployeeFromEditedEmployees = (employeeId: string) => {\n        if (existsInEditedEmployees(employeeId)) {\n            const filtered = editedEmployees.filter((item) => item.id !== employeeId);\n            setEditedEmployees(filtered);\n        }\n    };\n\n    const addEmployeeToEditedEmployees = (employee: IEmployee) => {\n        if (!existsInEditedEmployees(employee.id)) {\n            setEditedEmployees([...editedEmployees, employee]);\n        }\n    };\n\n    const replaceEmployeeInEditedEmployees = (employee: IEmployee) => {\n        const updatedEmployees = editedEmployees.map((item) => (item.id === employee.id ? employee : item));\n        setEditedEmployees(updatedEmployees);\n    };\n\n    const addRestoredEmployeeToEditedEmployees = (employeeId: string) => {\n        const restoredEmployee = employees.find((item) => item.id === employeeId);\n        if (restoredEmployee && !isEmployeeEqualToInitial(restoredEmployee)) {\n            addEmployeeToEditedEmployees(restoredEmployee);\n        }\n    };\n\n    // Handlers\n    const handleEmployeeChange = (employee: IEmployee) => {\n        if (isEmployeeEqualToInitial(employee)) {\n            removeEmployeeFromEditedEmployees(employee.id);\n        } else {\n            if (existsInEditedEmployees(employee.id)) {\n                replaceEmployeeInEditedEmployees(employee);\n            } else {\n                addEmployeeToEditedEmployees(employee);\n            }\n        }\n\n        const updatedEmployees = employees.map((item) => (item.id === employee.id ? employee : item));\n        setEmployees(updatedEmployees);\n    };\n\n    const handleEmployeeDelete = (employeeId: string) => {\n        const deletedEmployee = employees.find((item) => item.id === employeeId);\n        if (deletedEmployee) {\n            setDeletedEmployees([...deletedEmployees, deletedEmployee]);\n        }\n\n        removeEmployeeFromEditedEmployees(employeeId);\n    };\n\n    const handleEmployeeRestore = (employeeId: string) => {\n        const filtered = deletedEmployees.filter((item) => item.id !== employeeId);\n        setDeletedEmployees(filtered);\n\n        addRestoredEmployeeToEditedEmployees(employeeId);\n    };\n\n    const resetToInitial = () => {\n        setIsSubmited(false);\n        setEmployees(employeesList);\n        setEditedEmployees([]);\n        setDeletedEmployees([]);\n    };\n\n    const getEmployees = () => {\n        const filtered = employees.filter((item) => {\n            const values = Object.values(item);\n            for (const val of values) {\n                if (val.toLowerCase().includes(searchValue.toLocaleLowerCase())) {\n                    return item;\n                }\n            }\n        });\n        return filtered;\n    };\n\n    return (\n        <>\n            <Box style={{ backgroundColor: \"#1976d2\", color: \"white\", padding: \"12px 0\" }}>\n                <Grid container direction=\"row\" justify=\"center\">\n                    <Typography variant=\"h4\" component=\"h4\">\n                        Table Application\n                    </Typography>\n                </Grid>\n            </Box>\n            <Container maxWidth={\"lg\"}>\n                <Box marginY={5}>\n                    <Box marginBottom={2}>\n                        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\">\n                            <Box marginRight={1}>\n                                <Typography variant=\"subtitle1\" component=\"p\">\n                                    Search:\n                                </Typography>\n                            </Box>\n                            <TextField value={searchValue} onChange={(event) => setSearchValue(event.target.value)} />\n                        </Grid>\n                    </Box>\n                    {employees.length > 0 && (\n                        <Table\n                            employees={getEmployees()}\n                            deletedEmployees={deletedEmployees}\n                            onEmployeeChange={handleEmployeeChange}\n                            onEmployeeDelete={handleEmployeeDelete}\n                            onEmployeeRestore={handleEmployeeRestore}\n                        />\n                    )}\n                    <Box marginTop={2}>\n                        <Grid container direction=\"row\" justify=\"flex-end\" alignItems=\"baseline\">\n                            <Box marginRight={1}>\n                                <Button\n                                    style={{ backgroundColor: \"#1976d2\" }}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => setIsSubmited(true)}\n                                >\n                                    Submit\n                                </Button>\n                            </Box>\n                            <Button variant=\"contained\" color=\"secondary\" onClick={resetToInitial}>\n                                Reset to initial\n                            </Button>\n                        </Grid>\n                    </Box>\n                    {isSubmited && (\n                        <Box marginTop={5}>\n                            <UpdatedEmployees deletedEmployees={deletedEmployees} editedEmployees={editedEmployees} />\n                        </Box>\n                    )}\n                </Box>\n            </Container>\n        </>\n    );\n};\n\nexport async function getServerSideProps() {\n    // Fetch data from external API\n    const res = await fetch(`https://.../data`);\n    const data = await res.json();\n\n    // Pass data to the page via props\n    return { props: { data } };\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}