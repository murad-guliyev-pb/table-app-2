{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mguliyev/Documents/table-app-new/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport useSWR from \"swr\";\nimport App from \"../components/app\";\nimport AppSkeleton from \"../components/appSkeleton\";\nimport { baseUrl, fetcher } from \"../helpers/models\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar TableApp = function TableApp(_ref) {\n  _s();\n\n  var initialData = _ref.initialData;\n\n  var _useSWR = useSWR(\"\".concat(baseUrl(), \"/employee\"), fetcher, {\n    initialData: initialData\n  }),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  if (error) return ___EmotionJSX(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 23\n    },\n    __self: _this\n  }, \"failed to load\");\n  if (!data) return ___EmotionJSX(AppSkeleton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 23\n    },\n    __self: _this\n  });\n  return ___EmotionJSX(App, {\n    employeesList: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    },\n    __self: _this\n  });\n};\n\n_s(TableApp, \"HfXk2mUs8rBLr1YukymznVdb7t8=\", false, function () {\n  return [useSWR];\n});\n\n_c = TableApp;\nexport var __N_SSP = true;\nexport default TableApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableApp\");","map":{"version":3,"sources":["/Users/mguliyev/Documents/table-app-new/pages/index.tsx"],"names":["React","useState","useSWR","App","AppSkeleton","baseUrl","fetcher","TableApp","initialData","data","error","isLoading","setIsLoading"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,mBAAjC;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAkC;AAAA;;AAAA,MAA/BC,WAA+B,QAA/BA,WAA+B;;AAAA,gBACvBN,MAAM,WAAIG,OAAO,EAAX,gBAA0BC,OAA1B,EAAmC;AAAEE,IAAAA,WAAW,EAAXA;AAAF,GAAnC,CADiB;AAAA,MACvCC,IADuC,WACvCA,IADuC;AAAA,MACjCC,KADiC,WACjCA,KADiC;;AAAA,kBAEbT,QAAQ,CAAU,KAAV,CAFK;AAAA,MAExCU,SAFwC;AAAA,MAE7BC,YAF6B;;AAG/C,MAAIF,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAEX,SAAO,cAAC,GAAD;AAAK,IAAA,aAAa,EAAEA,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAPD;;GAAMF,Q;UACsBL,M;;;KADtBK,Q;;AAcN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useSWR from \"swr\";\n\nimport App from \"../components/app\";\nimport AppSkeleton from \"../components/appSkeleton\";\nimport { baseUrl, fetcher } from \"../helpers/models\";\n\nconst TableApp = ({ initialData }): JSX.Element => {\n    const { data, error } = useSWR(`${baseUrl()}/employee`, fetcher, { initialData });\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    if (error) return <div>failed to load</div>;\n    if (!data) return <AppSkeleton />;\n\n    return <App employeesList={data} />;\n};\n\nexport async function getServerSideProps() {\n    const data = await fetcher(`${baseUrl()}/employee`);\n    return { props: { data } };\n}\n\nexport default TableApp;\n"]},"metadata":{},"sourceType":"module"}