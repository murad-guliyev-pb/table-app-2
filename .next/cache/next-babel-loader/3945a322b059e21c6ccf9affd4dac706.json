{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mguliyev/Documents/table-app-new/pages/index.tsx\",\n    _this = this;\n\nimport React from \"react\";\nimport useSWR from \"swr\";\nimport App from \"../components/app\";\nimport AppSkeleton from \"../components/appSkeleton\";\nimport { baseUrl, fetcher } from \"../helpers/models\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nvar TableApp = /*#__PURE__*/function () {\n  var _s = $RefreshSig$();\n\n  var _ref2 = _asyncToGenerator(_s( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var initialData, _useSWR, data, error;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _s();\n\n            initialData = _ref.initialData;\n            _useSWR = useSWR(\"\".concat(baseUrl(), \"/employee\"), fetcher, {\n              initialData: initialData\n            }), data = _useSWR.data, error = _useSWR.error;\n\n            if (!error) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", ___EmotionJSX(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 12,\n                columnNumber: 23\n              },\n              __self: _this\n            }, \"failed to load\"));\n\n          case 5:\n            if (data) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", ___EmotionJSX(AppSkeleton, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 13,\n                columnNumber: 23\n              },\n              __self: _this\n            }));\n\n          case 7:\n            return _context.abrupt(\"return\", ___EmotionJSX(App, {\n              employeesList: data,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 15,\n                columnNumber: 12\n              },\n              __self: _this\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }), \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n    return [useSWR];\n  }));\n\n  return function TableApp(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n_c = TableApp;\nexport var __N_SSP = true;\nexport default TableApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableApp\");","map":{"version":3,"sources":["/Users/mguliyev/Documents/table-app-new/pages/index.tsx"],"names":["React","useSWR","App","AppSkeleton","baseUrl","fetcher","TableApp","initialData","data","error"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,mBAAjC;;;AAGA,IAAMC,QAAQ;AAAA;;AAAA,0EAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAASC,YAAAA,WAAT,QAASA,WAAT;AAAA,sBACWN,MAAM,WAAIG,OAAO,EAAX,gBAA0BC,OAA1B,EAAmC;AAAEE,cAAAA,WAAW,EAAXA;AAAF,aAAnC,CADjB,EACLC,IADK,WACLA,IADK,EACCC,KADD,WACCA,KADD;;AAAA,iBAGTA,KAHS;AAAA;AAAA;AAAA;;AAAA,6CAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAHL;;AAAA;AAAA,gBAIRD,IAJQ;AAAA;AAAA;AAAA;;AAAA,6CAIK,cAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJL;;AAAA;AAAA,6CAMN,cAAC,GAAD;AAAK,cAAA,aAAa,EAAEA,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;AAAA,YACcP,MADd;AAAA;;AAAA,kBAARK,QAAQ;AAAA;AAAA;AAAA,GAAd;;KAAMA,Q;;AAeN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport useSWR from \"swr\";\n\nimport App from \"../components/app\";\nimport AppSkeleton from \"../components/appSkeleton\";\nimport { baseUrl, fetcher } from \"../helpers/models\";\nimport { sleep } from \"../helpers/utils\";\n\nconst TableApp = async ({ initialData }): Promise<JSX.Element> => {\n    const { data, error } = useSWR(`${baseUrl()}/employee`, fetcher, { initialData });\n\n    if (error) return <div>failed to load</div>;\n    if (!data) return <AppSkeleton />;\n\n    return <App employeesList={data} />;\n};\n\nexport async function getServerSideProps() {\n    const data = await fetcher(`${baseUrl()}/employee`);\n    await sleep(5000);\n    return { props: { data } };\n}\n\nexport default TableApp;\n"]},"metadata":{},"sourceType":"module"}