{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mguliyev/Documents/table-app-new/components/table/tableCell.tsx\";\nimport { Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst TableCell = ({\n  value,\n  errors,\n  isEditing,\n  onChange,\n  name\n}) => {\n  const hasError = errors.includes(name);\n\n  const renderInput = () => ___EmotionJSX(React.Fragment, null, ___EmotionJSX(TextField, {\n    \"data-testid\": \"input\",\n    error: hasError,\n    name: name,\n    value: value,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    },\n    __self: this\n  }), hasError && ___EmotionJSX(Typography, {\n    style: {\n      color: \"#f44336\"\n    },\n    variant: \"caption\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    },\n    __self: this\n  }, hasError && value === \"\" ? \"Is mandatory\" : \"Invalid format\"));\n\n  const renderText = () => ___EmotionJSX(Box, {\n    paddingY: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    },\n    __self: this\n  }, ___EmotionJSX(Typography, {\n    variant: \"subtitle1\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    },\n    __self: this\n  }, value));\n\n  return ___EmotionJSX(Box, {\n    style: {\n      width: \"120px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    },\n    __self: this\n  }, isEditing && name !== \"id\" ? renderInput() : renderText());\n};\n\nexport default TableCell;","map":{"version":3,"sources":["/Users/mguliyev/Documents/table-app-new/components/table/tableCell.tsx"],"names":["Typography","Box","TextField","React","TableCell","value","errors","isEditing","onChange","name","hasError","includes","renderInput","color","renderText","width"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAYA,MAAMC,SAA2B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA,QAA5B;AAAsCC,EAAAA;AAAtC,CAAD,KAA+D;AAC/F,QAAMC,QAAQ,GAAGJ,MAAM,CAACK,QAAP,CAAgBF,IAAhB,CAAjB;;AAEA,QAAMG,WAAW,GAAG,MAChB,oCACI,cAAC,SAAD;AAAW,mBAAY,OAAvB;AAA+B,IAAA,KAAK,EAAEF,QAAtC;AAAgD,IAAA,IAAI,EAAED,IAAtD;AAA4D,IAAA,KAAK,EAAEJ,KAAnE;AAA0E,IAAA,QAAQ,EAAEG,QAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKE,QAAQ,IACL,cAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAnB;AAAyC,IAAA,OAAO,EAAC,SAAjD;AAA2D,IAAA,SAAS,EAAC,GAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,QAAQ,IAAIL,KAAK,KAAK,EAAtB,GAA2B,cAA3B,GAA4C,gBADjD,CAHR,CADJ;;AAUA,QAAMS,UAAU,GAAG,MACf,cAAC,GAAD;AAAK,IAAA,QAAQ,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,cAAC,UAAD;AAAY,IAAA,OAAO,EAAC,WAApB;AAAgC,IAAA,SAAS,EAAC,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,KADL,CADJ,CADJ;;AAQA,SAAO,cAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEU,MAAAA,KAAK,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCR,SAAS,IAAIE,IAAI,KAAK,IAAtB,GAA6BG,WAAW,EAAxC,GAA6CE,UAAU,EAAxF,CAAP;AACH,CAtBD;;AAwBA,eAAeV,SAAf","sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React from \"react\";\n\nimport { IEmployee } from \"../../helpers/models\";\n\nexport interface IProps {\n    value: string;\n    name: keyof IEmployee;\n    errors: Array<keyof IEmployee>;\n    isEditing: boolean;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst TableCell: React.FC<IProps> = ({ value, errors, isEditing, onChange, name }): JSX.Element => {\n    const hasError = errors.includes(name);\n\n    const renderInput = () => (\n        <>\n            <TextField data-testid=\"input\" error={hasError} name={name} value={value} onChange={onChange} />\n            {hasError && (\n                <Typography style={{ color: \"#f44336\" }} variant=\"caption\" component=\"p\">\n                    {hasError && value === \"\" ? \"Is mandatory\" : \"Invalid format\"}\n                </Typography>\n            )}\n        </>\n    );\n    const renderText = () => (\n        <Box paddingY={1}>\n            <Typography variant=\"subtitle1\" component=\"p\">\n                {value}\n            </Typography>\n        </Box>\n    );\n\n    return <Box style={{ width: \"120px\" }}>{isEditing && name !== \"id\" ? renderInput() : renderText()}</Box>;\n};\n\nexport default TableCell;\n"]},"metadata":{},"sourceType":"module"}